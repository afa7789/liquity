16,22c16,22
< * PriceFeed for mainnet deployment, to be connected to Chainlink's live ETH:USD aggregator reference 
< * contract, and a wrapper contract TellorCaller, which connects to TellorMaster contract.
< *
< * The PriceFeed uses Chainlink as primary oracle, and Tellor as fallback. It contains logic for
< * switching oracles based on oracle failures, timeouts, and conditions for returning to the primary
< * Chainlink oracle.
< */
---
>  * PriceFeed for mainnet deployment, to be connected to Chainlink's live ETH:USD aggregator reference
>  * contract, and a wrapper contract TellorCaller, which connects to TellorMaster contract.
>  *
>  * The PriceFeed uses Chainlink as primary oracle, and Tellor as fallback. It contains logic for
>  * switching oracles based on oracle failures, timeouts, and conditions for returning to the primary
>  * Chainlink oracle.
>  */
26c26
<     string constant public NAME = "PriceFeed";
---
>     string public constant NAME = "PriceFeed";
28,29c28,31
<     AggregatorV3Interface public priceAggregator;  // Mainnet Chainlink aggregator
<     ITellorCaller public tellorCaller;  // Wrapper contract that calls the Tellor system
---
>     AggregatorV3Interface public priceAggregator; // Mainnet Chainlink aggregator
>     AggregatorV3Interface public priceAggregator_BRL; // Mainnet Chainlink aggregator BRL
> 
>     ITellorCaller public tellorCaller; // Wrapper contract that calls the Tellor system
35c37,38
<     uint constant public ETHUSD_TELLOR_REQ_ID = 1;
---
>     uint public constant ETHUSD_TELLOR_REQ_ID = 1;
>     
38,39c41,42
<     uint constant public TARGET_DIGITS = 18;  
<     uint constant public TELLOR_DIGITS = 6;
---
>     uint public constant TARGET_DIGITS = 18;
>     uint public constant TELLOR_DIGITS = 6;
42,43c45,46
<     uint constant public TIMEOUT = 14400;  // 4 hours: 60 * 60 * 4
<     
---
>     uint public constant TIMEOUT = 14400; // 4 hours: 60 * 60 * 4
> 
45c48
<     uint constant public MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND =  5e17; // 50%
---
>     uint public constant MAX_PRICE_DEVIATION_FROM_PREVIOUS_ROUND = 5e17; // 50%
47,51c50,54
<     /* 
<     * The maximum relative price difference between two oracle responses allowed in order for the PriceFeed
<     * to return to using the Chainlink oracle. 18-digit precision.
<     */
<     uint constant public MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES = 5e16; // 5%
---
>     /*
>      * The maximum relative price difference between two oracle responses allowed in order for the PriceFeed
>      * to return to using the Chainlink oracle. 18-digit precision.
>      */
>     uint public constant MAX_PRICE_DIFFERENCE_BETWEEN_ORACLES = 5e16; // 5%
54c57,60
<     uint public lastGoodPrice;
---
>     uint public lastGoodPrice; 
> 
>     uint private lastGoodPriceBRL; 
> 
72,73c78,79
<         chainlinkWorking, 
<         usingTellorChainlinkUntrusted, 
---
>         chainlinkWorking,
>         usingTellorChainlinkUntrusted,
75c81
<         usingTellorChainlinkFrozen, 
---
>         usingTellorChainlinkFrozen,
86c92
<     
---
> 
88a95
>         address _priceAggregatorAddressBRL,
90,93c97,98
<     )
<         external
<         onlyOwner
<     {
---
>     ) external onlyOwner {
> 
96c101
<        
---
> 
99a105,107
>         // BRL
>         priceAggregator_BRL = AggregatorV3Interface(_priceAggregatorAddressBRL);
> 
104,108c112,123
<         ChainlinkResponse memory chainlinkResponse = _getCurrentChainlinkResponse();
<         ChainlinkResponse memory prevChainlinkResponse = _getPrevChainlinkResponse(chainlinkResponse.roundId, chainlinkResponse.decimals);
<         
<         require(!_chainlinkIsBroken(chainlinkResponse, prevChainlinkResponse) && !_chainlinkIsFrozen(chainlinkResponse), 
<             "PriceFeed: Chainlink must be working and current");
---
>         ChainlinkResponse memory chainlinkResponse = _getCurrentChainlinkResponse(priceAggregator);
>         ChainlinkResponse memory prevChainlinkResponse = _getPrevChainlinkResponse(
>             chainlinkResponse.roundId,
>             chainlinkResponse.decimals,
>             priceAggregator
>         );
> 
>         require(
>             !_chainlinkIsBroken(chainlinkResponse, prevChainlinkResponse) &&
>                 !_chainlinkIsFrozen(chainlinkResponse),
>             "PriceFeed: Chainlink must be working and current"
>         );
110c125,140
<         _storeChainlinkPrice(chainlinkResponse);
---
>         // Get an initial price from Chainlink to serve as first reference for lastGoodPrice
>         ChainlinkResponse memory chainlinkResponse_BRL = _getCurrentChainlinkResponse(priceAggregator_BRL);
>         ChainlinkResponse memory prevChainlinkResponse_BRL = _getPrevChainlinkResponse(
>             chainlinkResponse_BRL.roundId,
>             chainlinkResponse_BRL.decimals,
>             priceAggregator_BRL
>         );
> 
> 
>         require(
>             !_chainlinkIsBroken(chainlinkResponse_BRL, prevChainlinkResponse_BRL) &&
>                 !_chainlinkIsFrozen(chainlinkResponse_BRL),
>             "PriceFeed: Chainlink must be working and current"
>         );
> 
>         _storeChainlinkPrice(chainlinkResponse,chainlinkResponse_BRL);
116d145
< 
131,132c160,165
<         ChainlinkResponse memory chainlinkResponse = _getCurrentChainlinkResponse();
<         ChainlinkResponse memory prevChainlinkResponse = _getPrevChainlinkResponse(chainlinkResponse.roundId, chainlinkResponse.decimals);
---
>         ChainlinkResponse memory chainlinkResponse = _getCurrentChainlinkResponse(priceAggregator);
>         ChainlinkResponse memory prevChainlinkResponse = _getPrevChainlinkResponse(
>             chainlinkResponse.roundId,
>             chainlinkResponse.decimals,
>             priceAggregator
>         );
134a168,183
>         // Get current and previous price data from Chainlink, and current price data from Tellor
>         ChainlinkResponse memory chainlinkResponse_BRL = _getCurrentChainlinkResponse(priceAggregator_BRL);
>         ChainlinkResponse memory prevChainlinkResponse_BRL  = _getPrevChainlinkResponse(
>             chainlinkResponse_BRL.roundId,
>             chainlinkResponse_BRL.decimals,
>             priceAggregator_BRL
>         );
> 
>         int256 previousBRLPrice = chainlinkResponse_BRL.answer;
> 
>         if ( _chainlinkIsBroken(chainlinkResponse_BRL, prevChainlinkResponse_BRL) ) {
>             previousBRLPrice = int256(lastGoodPriceBRL);
>         }else { 
>             lastGoodPriceBRL = uint(chainlinkResponse_BRL.answer);
>         }
> 
194c243
<                     return _storeChainlinkPrice(chainlinkResponse);
---
>                     return _storeChainlinkPrice(chainlinkResponse,chainlinkResponse_BRL);
209c258
<             return _storeChainlinkPrice(chainlinkResponse);
---
>             return _storeChainlinkPrice(chainlinkResponse,chainlinkResponse_BRL);
212d260
< 
218c266
<                 return _storeChainlinkPrice(chainlinkResponse);
---
>                 return _storeChainlinkPrice(chainlinkResponse,chainlinkResponse_BRL);
244c292
<                 return _storeChainlinkPrice(chainlinkResponse);
---
>                 return _storeChainlinkPrice(chainlinkResponse,chainlinkResponse_BRL);
286c334,335
<                 return _storeChainlinkPrice(chainlinkResponse);
---
>                 return _storeChainlinkPrice(chainlinkResponse,chainlinkResponse_BRL);
> 
296c345,346
<                 return _storeChainlinkPrice(chainlinkResponse);
---
>                 return _storeChainlinkPrice(chainlinkResponse,chainlinkResponse_BRL);
> 
320c370,371
<                 return _storeChainlinkPrice(chainlinkResponse);
---
>                 return _storeChainlinkPrice(chainlinkResponse,chainlinkResponse_BRL);
> 
332c383,384
<             return _storeChainlinkPrice(chainlinkResponse);
---
>             return _storeChainlinkPrice(chainlinkResponse,chainlinkResponse_BRL);
> 
339,346c391,401
<     * for two reasons:
<     *
<     * 1) It is necessary data for the price deviation check in case 1,
<     * and
<     * 2) Chainlink is the PriceFeed's preferred primary oracle - having two consecutive valid round responses adds
<     * peace of mind when using or returning to Chainlink.
<     */
<     function _chainlinkIsBroken(ChainlinkResponse memory _currentResponse, ChainlinkResponse memory _prevResponse) internal view returns (bool) {
---
>      * for two reasons:
>      *
>      * 1) It is necessary data for the price deviation check in case 1,
>      * and
>      * 2) Chainlink is the PriceFeed's preferred primary oracle - having two consecutive valid round responses adds
>      * peace of mind when using or returning to Chainlink.
>      */
>     function _chainlinkIsBroken(
>         ChainlinkResponse memory _currentResponse,
>         ChainlinkResponse memory _prevResponse
>     ) internal view returns (bool) {
351,352c406,409
<          // Check for response call reverted
<         if (!_response.success) {return true;}
---
>         // Check for response call reverted
>         if (!_response.success) {
>             return true;
>         }
354c411,413
<         if (_response.roundId == 0) {return true;}
---
>         if (_response.roundId == 0) {
>             return true;
>         }
356c415,417
<         if (_response.timestamp == 0 || _response.timestamp > block.timestamp) {return true;}
---
>         if (_response.timestamp == 0 || _response.timestamp > block.timestamp) {
>             return true;
>         }
358c419,421
<         if (_response.answer <= 0) {return true;}
---
>         if (_response.answer <= 0) {
>             return true;
>         }
367,369c430,441
<     function _chainlinkPriceChangeAboveMax(ChainlinkResponse memory _currentResponse, ChainlinkResponse memory _prevResponse) internal pure returns (bool) {
<         uint currentScaledPrice = _scaleChainlinkPriceByDigits(uint256(_currentResponse.answer), _currentResponse.decimals);
<         uint prevScaledPrice = _scaleChainlinkPriceByDigits(uint256(_prevResponse.answer), _prevResponse.decimals);
---
>     function _chainlinkPriceChangeAboveMax(
>         ChainlinkResponse memory _currentResponse,
>         ChainlinkResponse memory _prevResponse
>     ) internal pure returns (bool) {
>         uint currentScaledPrice = _scaleChainlinkPriceByDigits(
>             uint256(_currentResponse.answer),
>             _currentResponse.decimals
>         );
>         uint prevScaledPrice = _scaleChainlinkPriceByDigits(
>             uint256(_prevResponse.answer),
>             _prevResponse.decimals
>         );
375,378c447,450
<         * Use the larger price as the denominator:
<         * - If price decreased, the percentage deviation is in relation to the the previous price.
<         * - If price increased, the percentage deviation is in relation to the current price.
<         */
---
>          * Use the larger price as the denominator:
>          * - If price decreased, the percentage deviation is in relation to the the previous price.
>          * - If price increased, the percentage deviation is in relation to the current price.
>          */
387c459,461
<         if (!_response.success) {return true;}
---
>         if (!_response.success) {
>             return true;
>         }
389c463,465
<         if (_response.timestamp == 0 || _response.timestamp > block.timestamp) {return true;}
---
>         if (_response.timestamp == 0 || _response.timestamp > block.timestamp) {
>             return true;
>         }
391c467,469
<         if (_response.value == 0) {return true;}
---
>         if (_response.value == 0) {
>             return true;
>         }
396c474
<      function _tellorIsFrozen(TellorResponse  memory _tellorResponse) internal view returns (bool) {
---
>     function _tellorIsFrozen(TellorResponse memory _tellorResponse) internal view returns (bool) {
400,401c478
<     function _bothOraclesLiveAndUnbrokenAndSimilarPrice
<     (
---
>     function _bothOraclesLiveAndUnbrokenAndSimilarPrice(
405,409c482
<     )
<         internal
<         view
<         returns (bool)
<     {
---
>     ) internal view returns (bool) {
411,412c484
<         if
<         (
---
>         if (
417,418c489
<         )
<         {
---
>         ) {
425,426c496,503
<     function _bothOraclesSimilarPrice( ChainlinkResponse memory _chainlinkResponse, TellorResponse memory _tellorResponse) internal pure returns (bool) {
<         uint scaledChainlinkPrice = _scaleChainlinkPriceByDigits(uint256(_chainlinkResponse.answer), _chainlinkResponse.decimals);
---
>     function _bothOraclesSimilarPrice(
>         ChainlinkResponse memory _chainlinkResponse,
>         TellorResponse memory _tellorResponse
>     ) internal pure returns (bool) {
>         uint scaledChainlinkPrice = _scaleChainlinkPriceByDigits(
>             uint256(_chainlinkResponse.answer),
>             _chainlinkResponse.decimals
>         );
435,437c512,514
<         * Return true if the relative price difference is <= 3%: if so, we assume both oracles are probably reporting
<         * the honest market price, as it is unlikely that both have been broken/hacked and are still in-sync.
<         */
---
>          * Return true if the relative price difference is <= 3%: if so, we assume both oracles are probably reporting
>          * the honest market price, as it is unlikely that both have been broken/hacked and are still in-sync.
>          */
441c518,521
<     function _scaleChainlinkPriceByDigits(uint _price, uint _answerDigits) internal pure returns (uint) {
---
>     function _scaleChainlinkPriceByDigits(
>         uint _price,
>         uint _answerDigits
>     ) internal pure returns (uint) {
443,447c523,527
<         * Convert the price returned by the Chainlink oracle to an 18-digit decimal for use by Liquity.
<         * At date of Liquity launch, Chainlink uses an 8-digit price, but we also handle the possibility of
<         * future changes.
<         *
<         */
---
>          * Convert the price returned by the Chainlink oracle to an 18-digit decimal for use by Liquity.
>          * At date of Liquity launch, Chainlink uses an 8-digit price, but we also handle the possibility of
>          * future changes.
>          *
>          */
452,453c532
<         }
<         else if (_answerDigits < TARGET_DIGITS) {
---
>         } else if (_answerDigits < TARGET_DIGITS) {
461c540
<         return _price.mul(10**(TARGET_DIGITS - TELLOR_DIGITS));
---
>         return _price.mul(10 ** (TARGET_DIGITS - TELLOR_DIGITS));
474c553
<      function _storeTellorPrice(TellorResponse memory _tellorResponse) internal returns (uint) {
---
>     function _storeTellorPrice(TellorResponse memory _tellorResponse) internal returns (uint) {
476,477c555,556
<         _storePrice(scaledTellorPrice);
< 
---
>         _storePrice(SafeMath.div(scaledTellorPrice,lastGoodPriceBRL));
>         
481,483c560,575
<     function _storeChainlinkPrice(ChainlinkResponse memory _chainlinkResponse) internal returns (uint) {
<         uint scaledChainlinkPrice = _scaleChainlinkPriceByDigits(uint256(_chainlinkResponse.answer), _chainlinkResponse.decimals);
<         _storePrice(scaledChainlinkPrice);
---
>     function _storeChainlinkPrice(
>         ChainlinkResponse memory _chainlinkResponse,
>         ChainlinkResponse memory _chainlinkResponse_2
>     ) internal returns (uint) {
> 
>         uint scaledChainlinkPrice = _scaleChainlinkPriceByDigits(
>             uint256(_chainlinkResponse.answer),
>             _chainlinkResponse.decimals
>         );
> 
>         uint scaledChainlinkPrice_2 = _scaleChainlinkPriceByDigits(
>             uint256(_chainlinkResponse_2.answer),
>             _chainlinkResponse_2.decimals
>         );
> 
>         _storePrice(SafeMath.div(scaledChainlinkPrice,scaledChainlinkPrice_2));
489,492c581,586
< 
<     function _getCurrentTellorResponse() internal view returns (TellorResponse memory tellorResponse) {
<         try tellorCaller.getTellorCurrentValue(ETHUSD_TELLOR_REQ_ID) returns
<         (
---
>     function _getCurrentTellorResponse()
>         internal
>         view
>         returns (TellorResponse memory tellorResponse)
>     {
>         try tellorCaller.getTellorCurrentValue(ETHUSD_TELLOR_REQ_ID) returns (
496,497c590
<         )
<         {
---
>         ) {
505,506c598,599
<         }catch {
<              // If call to Tellor reverts, return a zero response with success = false
---
>         } catch {
>             // If call to Tellor reverts, return a zero response with success = false
511c604,610
<     function _getCurrentChainlinkResponse() internal view returns (ChainlinkResponse memory chainlinkResponse) {
---
>     function _getCurrentChainlinkResponse(
>         AggregatorV3Interface aggregator
>     )
>         internal
>         view
>         returns (ChainlinkResponse memory chainlinkResponse)
>     {
513c612
<         try priceAggregator.decimals() returns (uint8 decimals) {
---
>         try aggregator.decimals() returns (uint8 decimals) {
522,523c621
<         try priceAggregator.latestRoundData() returns
<         (
---
>         try aggregator.latestRoundData() returns (
529,530c627
<         )
<         {
---
>         ) {
543c640,644
<     function _getPrevChainlinkResponse(uint80 _currentRoundId, uint8 _currentDecimals) internal view returns (ChainlinkResponse memory prevChainlinkResponse) {
---
>     function _getPrevChainlinkResponse(
>         uint80 _currentRoundId,
>         uint8 _currentDecimals,
>         AggregatorV3Interface aggregator
>     ) internal view returns (ChainlinkResponse memory prevChainlinkResponse) {
545,547c646,648
<         * NOTE: Chainlink only offers a current decimals() value - there is no way to obtain the decimal precision used in a 
<         * previous round.  We assume the decimals used in the previous round are the same as the current round.
<         */
---
>          * NOTE: Chainlink only offers a current decimals() value - there is no way to obtain the decimal precision used in a
>          * previous round.  We assume the decimals used in the previous round are the same as the current round.
>          */
550,551c651
<         try priceAggregator.getRoundData(_currentRoundId - 1) returns 
<         (
---
>         try aggregator.getRoundData(_currentRoundId - 1) returns (
557,558c657
<         )
<         {
---
>         ) {
572d670
< 
